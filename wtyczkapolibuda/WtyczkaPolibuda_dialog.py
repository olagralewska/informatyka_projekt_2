# -*- coding: utf-8 -*-
"""
/***************************************************************************
 WtyczkaNaZajeciahDialog
                                 A QGIS plugin
 wtyczka do Qgis
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-05-22
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Jakub Tokarski
        email                : 01169935@pw.edu.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets


from qgis.core import QgsVectorLayer, QgsMapLayer

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'WtyczkaPolibuda_dialog_base.ui'))


class WtyczkaNaZajeciahDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(WtyczkaNaZajeciahDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        self.Przycisk1.clicked.connect(self.count_selected_features)
    
        self.Przycisk2.clicked.connect(self.show_layer_name)
        self.Przycisk2.clicked.connect(self.display_coords)
        
        self.Przycisk3.clicked.connect(self.roz_wys)
        
        self.Przycisk4.clicked.connect(self.calculate_area)
    
    def display_coords(self):
        selected_featres = self.mMapLayerComboBox.currentLayer().selectedFeatures()
        for feature in selected_featres:
            feature_geometry = feature.geometry().asPoint()
            self.textEdit.append(f'{feature_geometry}\n')
    
    def count_selected_features(self):
        number_of_selected_featres = len(self.mMapLayerComboBox.currentLayer().selectedFeatures())
        self.label.setText(str(number_of_selected_featres))
        
    def show_layer_name(self):
        layer_name = self.mMapLayerComboBox.currentLayer().name()
        self.label_2.setText(layer_name)
        
    def roz_wys(self):
        selected_features = self.mMapLayerComboBox.currentLayer().selectedFeatures()
        if len(selected_features) < 1:
            QtWidgets.QMessageBox.warning(self, "Błąd", "Wybierz co najmniej 2 punkty.")
            return
        elif len(selected_features) > 2:
            QtWidgets.QMessageBox.warning(self, "Błąd", "Za dużo wybranych punktów.Program liczy różnicę dla 2 punktów.")
            return

        feature1 = selected_features[0]
        feature2 = selected_features[1]

        height1 = feature1.attribute("H_PLEVRF20")
        height2 = feature2.attribute("H_PLEVRF20")

        difference = height2 - height1

        QtWidgets.QMessageBox.information(self, "Wynik", f"Różnica wysokości między punktami wynosi: {difference} [m]")
        
    import math

    def calculate_area(self):
        layer = self.mMapLayerComboBox.currentLayer()
        if not layer or not layer.type() == QgsMapLayer.VectorLayer:
            QtWidgets.QMessageBox.warning(self, "Błąd", "Wybierz warstwę wektorową.")
            return
    
        selected_features = layer.selectedFeatures()
        if len(selected_features) < 3:
            QtWidgets.QMessageBox.warning(self, "Błąd", "Wybierz co najmniej 3 punkty.")
            return
    
        field_area = 0.0
    
        # Pobranie współrzędnych zaznaczonych punktów
        points = [feature.geometry().asPoint() for feature in selected_features]
    
        # Sprawdzenie, czy pierwszy i ostatni punkt są takie same (zamknięcie figury)
        if points[0] != points[-1]:
            points.append(points[0])  # Dodanie pierwszego punktu na koniec listy
    
        # Obliczanie pola na podstawie współrzędnych zaznaczonych punktów (metoda Gaussa)
        n = len(points)
        for i in range(n - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            field_area += (x1 * y2 - x2 * y1)
    
        field_area = abs(field_area) / 2.0
    
        QtWidgets.QMessageBox.information(self, "Wynik", f"Pole powierzchni figury wynosi: {field_area} [m2]")